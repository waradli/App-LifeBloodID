Index: app/src/main/java/com/example/appslifebloodid/ui/page/component/menu_home/DetailArtikel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.appslifebloodid.ui.page.component.menu_home\r\n\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxHeight\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.KeyboardArrowLeft\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CardDefaults\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.layout.ContentScale\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.lifecycle.viewmodel.compose.viewModel\r\nimport androidx.navigation.NavController\r\nimport coil.compose.AsyncImage\r\nimport coil.compose.rememberImagePainter\r\nimport coil.request.ImageRequest\r\nimport com.example.appslifebloodid.data.network.RetrofitInstance\r\nimport com.example.appslifebloodid.data.repository.ArticleRepository\r\nimport com.example.appslifebloodid.data.repository.EventRepository\r\nimport com.example.appslifebloodid.data.response.Article\r\nimport com.example.appslifebloodid.ui.base.ArticleViewModel\r\nimport com.example.appslifebloodid.ui.base.ArticleViewModelFactory\r\nimport com.example.appslifebloodid.ui.base.EventViewModel\r\nimport com.example.appslifebloodid.ui.base.EventViewModelFactory\r\n\r\n@Composable\r\nfun DetailArtikel(\r\n    navController: NavController,\r\n    artikelId: Int,\r\n//    locationId: Int,\r\n    viewModel: ArticleViewModel = viewModel(\r\n        factory = ArticleViewModelFactory(ArticleRepository(RetrofitInstance.api))\r\n    )\r\n) {\r\n    val articleDetail by viewModel.articleDetail.collectAsState()\r\n\r\n    // Fetch location detail when the composable is first launched\r\n    LaunchedEffect(artikelId) {\r\n        viewModel.getLocationDetail(artikelId)\r\n    }\r\n\r\n    articleDetail?.let { article ->\r\n        val imageUrl = RetrofitInstance.baseUrl + article.image_url\r\n        Column {\r\n            Box(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .height(100.dp)\r\n                    .padding(top = 35.dp)\r\n                    .background(Color(0xffE35A5A))\r\n            ) {\r\n                Row(\r\n                    modifier = Modifier.fillMaxWidth(),\r\n                    verticalAlignment = Alignment.CenterVertically\r\n                ) {\r\n                    IconButton(\r\n                        onClick = { navController.popBackStack() },\r\n                        modifier = Modifier.padding(top = 10.dp)\r\n                    ) {\r\n                        Icon(\r\n                            imageVector = Icons.Default.KeyboardArrowLeft,\r\n                            tint = Color.White,\r\n                            modifier = Modifier.size(50.dp),\r\n                            contentDescription = \"Icon Arrow\"\r\n                        )\r\n                    }\r\n                    Spacer(modifier = Modifier.width(100.dp))\r\n                    Text(\r\n                        text = \"Detail Artikel\",\r\n                        fontSize = 24.sp,\r\n                        fontWeight = FontWeight.Bold,\r\n                        modifier = Modifier.padding(top = 10.dp),\r\n                        color = Color.White\r\n                    )\r\n                }\r\n            }\r\n            Column(\r\n\r\n                modifier = Modifier.padding(horizontal = 25.dp, vertical = 20.dp)\r\n            ) {\r\n                Text(\r\n                    text = article.title,\r\n                    fontSize = 23.sp,\r\n                    fontWeight = FontWeight.Bold\r\n                )\r\n                Spacer(modifier = Modifier.padding(vertical = 20.dp))\r\n                Card(elevation = CardDefaults.cardElevation(10.dp)) {\r\n//                    AsyncImage(\r\n//                        model = ImageRequest.Builder(LocalContext.current)\r\n//                            .data(data = detailArt[0].image_url)\r\n//                            .build(),\r\n//                        contentScale = ContentScale.Fit,\r\n//                        modifier = Modifier.fillMaxWidth(),\r\n//\r\n//\r\n//                        contentDescription = \"Poster Movie\"\r\n//                    )\r\n                    Image(\r\n                        painter = rememberImagePainter(\r\n                            data = imageUrl,\r\n                            builder = {\r\n                                crossfade(true)\r\n                            }\r\n                        ),\r\n                        contentDescription = null,\r\n                        modifier = Modifier\r\n                            .width(400.dp)\r\n                            .height(300.dp)\r\n                    )\r\n                }\r\n                Spacer(\r\n                    modifier =\r\n                    Modifier.padding(vertical = 20.dp)\r\n\r\n                )\r\n                Text(\r\n                    text = \"article.created_at}\",\r\n                    style = TextStyle(\r\n                        fontWeight = FontWeight.Medium,\r\n                        fontSize = 14.sp,\r\n                        color = Color(0xff959595)\r\n                    )\r\n                )\r\n            }\r\n//        LazyColumn {\r\n//            val detailArt = DataColumn.artikelColum.filter { dataArtikel ->\r\n//                dataArtikel.id == artikelId\r\n//            }\r\n//\r\n//            item {\r\n//\r\n//                Column(\r\n//                    modifier = modifier\r\n//                ) {\r\n//                    PrevDetailArt(detailArt = detailArt)\r\n//                }\r\n//            }\r\n//        }\r\n\r\n\r\n        }\r\n    }\r\n}\r\n\r\n//@Composable\r\n//fun PrevDetailArt(\r\n//    modifier: Modifier = Modifier,\r\n//    detailArt: List<Article>,\r\n//) {\r\n//    Column(\r\n//\r\n//        modifier = Modifier.padding(horizontal = 25.dp, vertical = 20.dp)\r\n//    ) {\r\n//        Text(\r\n//            text = detailArt[0].title,\r\n//            fontSize = 23.sp,\r\n//            fontWeight = FontWeight.Bold\r\n//        )\r\n//        Spacer(modifier = Modifier.padding(vertical = 20.dp))\r\n//        Card(elevation = CardDefaults.cardElevation(10.dp)) {\r\n//            AsyncImage(\r\n//                model = ImageRequest.Builder(LocalContext.current)\r\n//                    .data(data = detailArt[0].image_url)\r\n//                    .build(),\r\n//                contentScale = ContentScale.Fit,\r\n//                modifier = Modifier.fillMaxWidth(),\r\n//\r\n//\r\n//                contentDescription = \"Poster Movie\"\r\n//            )\r\n//        }\r\n//        Spacer(\r\n//            modifier =\r\n//            Modifier.padding(vertical = 20.dp)\r\n//\r\n//        )\r\n//        Text(\r\n//            text = \"${detailArt[0].created_at}\",\r\n//            style = TextStyle(\r\n//                fontWeight = FontWeight.Medium,\r\n//                fontSize = 14.sp,\r\n//                color = Color(0xff959595)\r\n//            )\r\n//        )\r\n//    }\r\n//\r\n//\r\n//}\r\n//\r\n
===================================================================
diff --git a/app/src/main/java/com/example/appslifebloodid/ui/page/component/menu_home/DetailArtikel.kt b/app/src/main/java/com/example/appslifebloodid/ui/page/component/menu_home/DetailArtikel.kt
--- a/app/src/main/java/com/example/appslifebloodid/ui/page/component/menu_home/DetailArtikel.kt	
+++ b/app/src/main/java/com/example/appslifebloodid/ui/page/component/menu_home/DetailArtikel.kt	
@@ -55,20 +55,20 @@
 fun DetailArtikel(
     navController: NavController,
     artikelId: Int,
-//    locationId: Int,
-    viewModel: ArticleViewModel = viewModel(
-        factory = ArticleViewModelFactory(ArticleRepository(RetrofitInstance.api))
-    )
+//    viewModel: ArticleViewModel = viewModel(
+//        factory = ArticleViewModelFactory(ArticleRepository(RetrofitInstance.api))
+//    )
 ) {
-    val articleDetail by viewModel.articleDetail.collectAsState()
+
+//    val articleDetail by viewModel.articleDetail.collectAsState()
 
     // Fetch location detail when the composable is first launched
-    LaunchedEffect(artikelId) {
-        viewModel.getLocationDetail(artikelId)
-    }
+//    LaunchedEffect(artikelId) {
+//        viewModel.getLocationDetail(artikelId)
+//    }
 
-    articleDetail?.let { article ->
-        val imageUrl = RetrofitInstance.baseUrl + article.image_url
+//    articleDetail?.let { article ->
+//        val imageUrl = RetrofitInstance.baseUrl + article.image_url
         Column {
             Box(
                 modifier = Modifier
@@ -102,17 +102,20 @@
                     )
                 }
             }
-            Column(
 
-                modifier = Modifier.padding(horizontal = 25.dp, vertical = 20.dp)
-            ) {
-                Text(
-                    text = article.title,
-                    fontSize = 23.sp,
-                    fontWeight = FontWeight.Bold
-                )
-                Spacer(modifier = Modifier.padding(vertical = 20.dp))
-                Card(elevation = CardDefaults.cardElevation(10.dp)) {
+        }
+//            Column(
+//
+//                modifier = Modifier.padding(horizontal = 25.dp, vertical = 20.dp)
+//            ) {
+//
+//                Text(
+//                    text = article.title,
+//                    fontSize = 23.sp,
+//                    fontWeight = FontWeight.Bold
+//                )
+//                Spacer(modifier = Modifier.padding(vertical = 20.dp))
+//                Card(elevation = CardDefaults.cardElevation(10.dp)) {
 //                    AsyncImage(
 //                        model = ImageRequest.Builder(LocalContext.current)
 //                            .data(data = detailArt[0].image_url)
@@ -123,51 +126,37 @@
 //
 //                        contentDescription = "Poster Movie"
 //                    )
-                    Image(
-                        painter = rememberImagePainter(
-                            data = imageUrl,
-                            builder = {
-                                crossfade(true)
-                            }
-                        ),
-                        contentDescription = null,
-                        modifier = Modifier
-                            .width(400.dp)
-                            .height(300.dp)
-                    )
-                }
-                Spacer(
-                    modifier =
-                    Modifier.padding(vertical = 20.dp)
-
-                )
-                Text(
-                    text = "article.created_at}",
-                    style = TextStyle(
-                        fontWeight = FontWeight.Medium,
-                        fontSize = 14.sp,
-                        color = Color(0xff959595)
-                    )
-                )
-            }
-//        LazyColumn {
-//            val detailArt = DataColumn.artikelColum.filter { dataArtikel ->
-//                dataArtikel.id == artikelId
-//            }
-//
-//            item {
+//                    Image(
+//                        painter = rememberImagePainter(
+//                            data = imageUrl,
+//                            builder = {
+//                                crossfade(true)
+//                            }
+//                        ),
+//                        contentDescription = null,
+//                        modifier = Modifier
+//                            .width(400.dp)
+//                            .height(300.dp)
+//                    )
+//                }
+//                Spacer(
+//                    modifier =
+//                    Modifier.padding(vertical = 20.dp)
 //
-//                Column(
-//                    modifier = modifier
-//                ) {
-//                    PrevDetailArt(detailArt = detailArt)
-//                }
-//            }
-//        }
-
-
-        }
-    }
+//                )
+//                Text(
+//                    text = "article.created_at}",
+//                    style = TextStyle(
+//                        fontWeight = FontWeight.Medium,
+//                        fontSize = 14.sp,
+//                        color = Color(0xff959595)
+//                    )
+//                )
+//            }
+//
+//            
+//        }
+//    }
 }
 
 //@Composable
